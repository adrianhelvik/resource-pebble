// Generated by CoffeeScript 1.10.0
(function() {
  var controller, provide, stripIllegal;

  stripIllegal = require('./stripIllegalFields');


  /*
   * Use res.provide if available, otherwise fall back to regular json response
   */

  provide = function(res, type, data) {
    var err, error;
    try {
      if (res.provide != null) {
        return res.provide(type, data);
      }
    } catch (error) {
      err = error;
      throw new Error(type + " is not a registered response, but is required for resource-pebble");
    }
    if (type === 'success') {
      return res.status(200).json({
        status: 200,
        success: true,
        data: data
      });
    } else if (type === 'error') {
      return res.status(500).json({
        status: 500,
        success: false,
        data: data
      });
    } else if (type === 'created') {
      return res.status(201).json({
        status: 201,
        success: true,
        data: data
      });
    } else if (type === 'not found') {
      return res.status(404).json({
        status: 404,
        success: false,
        data: data
      });
    } else {
      throw new Error("Error in resource-pebble/default-controller. Response '" + type + "' not defined.");
    }
  };


  /*
   * Constructor function for the default controller
   */

  controller = function(Model) {
    return {
      show: function(req, res, next) {
        return Model.findById(req.params.id, function(err, data) {
          if (err != null) {
            return provide(res, 'error', err);
          }
          if (data != null) {
            return provide(res, 'success', data);
          }
          return provide(res, 'not found', data);
        });
      },
      all: function(req, res, next) {
        var query, schema;
        query = Model.find({});
        schema = Model.schema.tree;
        Object.keys(schema).forEach(function(field) {
          if (schema[field].type && schema[field].type.schemaName === 'ObjectId') {
            return query.populate(field);
          }
        });
        return query.exec(function(err, data) {
          if (err != null) {
            return provide(res, 'error', err);
          }
          return provide(res, 'success', data);
        });
      },
      create: function(req, res, next) {
        var instance;
        instance = new Model(stripIllegal(req.body));
        return instance.save(function(err) {
          if (err != null) {
            return provide(res, 'error', err);
          }
          return provide(res, 'created', instance);
        });
      },
      update: function(req, res, next) {
        return Model.findOneAndUpdate(req.params.id, stripIllegal(req.body), function(err, data) {
          if (err != null) {
            return provide(res, 'error', err);
          }
          return provide(res, 'success', data);
        });
      },
      destroy: function(req, res, next) {
        return Model.findOneAndRemove(req.params.id, function(err, data) {
          if (err != null) {
            return provide(res, 'error', err);
          }
          return provide(res, 'success', data);
        });
      }
    };
  };

  module.exports = controller;

}).call(this);
